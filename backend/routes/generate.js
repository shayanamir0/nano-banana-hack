
import express from 'express';
import { GoogleGenAI } from '@google/genai';

const router = express.Router();
import dotenv from 'dotenv';
dotenv.config()
// Initialize Gemini AI
const ai = new GoogleGenAI({
  apiKey: process.env.GEMINI_API_KEY
});

router.post('/generate', async (req, res) => {
  try {
    const { image, mode, customPrompt, isRefinement = false } = req.body;

    if (!image) {
      return res.status(400).json({
        success: false,
        error: 'No image provided'
      });
    }

    if (!process.env.GEMINI_API_KEY) {
      return res.status(500).json({
        success: false,
        error: 'Gemini API key not configured'
      });
    }

    console.log(`${isRefinement ? 'Refining' : 'Generating'} ${mode} design...`);
    console.log('Using prompt:', customPrompt);

    // Use the detailed prompt directly from the frontend
    const prompt = [
      { text: customPrompt },
      {
        inlineData: {
          mimeType: "image/png",
          data: image,
        },
      },
    ];

    // Generate content with Gemini
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash-image-preview",
      contents: prompt,
    });

    // Process the response
    let generatedImageData = null;
    let textResponse = null;

    for (const part of response.candidates[0].content.parts) {
      if (part.text) {
        textResponse = part.text;
        console.log('Generated text:', part.text);
      } else if (part.inlineData) {
        generatedImageData = part.inlineData.data;
        console.log('Generated image received');
      }
    }

    if (generatedImageData) {
      res.json({
        success: true,
        imageBase64: generatedImageData,
        description: textResponse,
        mode: mode,
        isRefinement: isRefinement
      });
    } else {
      res.status(500).json({
        success: false,
        error: 'No image was generated by the AI model',
        description: textResponse
      });
    }

  } catch (error) {
    console.error('Error generating design:', error);
    res.status(500).json({
      success: false,
      error: error.message || 'Failed to generate design'
    });
  }
});

export default router;